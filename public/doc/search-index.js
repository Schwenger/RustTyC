var searchIndex = JSON.parse('{\
"rusttyc":{"doc":"This crate provides an interface to perform lattice-based…","i":[[3,"TcKey","rusttyc","An inexpensive and simple indexing mechanism using during…",null,null],[3,"TypeChecker","","The [TypeChecker] is the main interaction point for the…",null,null],[4,"TcErr","","Represents an error during the type check procedure.",null,null],[13,"KeyEquation","","Two keys were attempted to be equated and their underlying…",0,null],[13,"Bound","","An explicit type bound imposed on a key turned out to be…",0,null],[13,"ChildAccessOutOfBound","","This error occurs when a constraint accesses the `n`th…",0,null],[13,"ArityMismatch","","This error occurs if the type checker inferred a specific…",0,null],[12,"key","rusttyc::TcErr","The key for which the mismatch was detected.",1,null],[12,"variant","","The variant with fixed arity.",1,null],[12,"inferred_arity","","The least required arity according to the type check…",1,null],[12,"reported_arity","","The arity required according to the meet operation that…",1,null],[13,"Construction","rusttyc","An error reporting a failed type construction. Contains…",0,null],[13,"ChildConstruction","","This error indicates that a variant requires children, for…",0,null],[11,"concretizes","","Connects two keys asymmetrically. Refining `bound` refines…",2,[[],[["constraint",4],["variant",8]]]],[11,"equate_with","","Equates two keys, i.e., they refer to the same type and…",2,[[],[["constraint",4],["variant",8]]]],[11,"concretizes_explicit","","Declares that `self` is at least as concrete as `bound`.",2,[[["variant",8]],[["constraint",4],["variant",8]]]],[11,"is_meet_of","","Declares that `self` is the meet of `left` and `right`.…",2,[[],[["constraint",4],["variant",8]]]],[11,"is_meet_of_all","","Declares that `self` is the meet of all elements contained…",2,[[],[["constraint",4],["variant",8]]]],[11,"is_sym_meet_of","","Declares that `self` is the symmetric meet of `left` and…",2,[[],[["constraint",4],["variant",8]]]],[11,"is_sym_meet_of_all","","Declares that `self` is the symmetric meet of all elements…",2,[[],[["constraint",4],["variant",8]]]],[11,"without_vars","","Instantiates a new, empty type checker that does not…",3,[[],["varlesstypechecker",6]]],[11,"new","","Creates a new, empty type checker.  ",3,[[]]],[11,"new_term_key","","Generates a new key representing a term.  ",3,[[],["tckey",3]]],[11,"get_var_key","","Manages keys for variables. It checks if `var` already has…",3,[[],["tckey",3]]],[11,"get_child_key","","Provides a key to the `nth` child of the type behind…",3,[[["tckey",3]],[["tckey",3],["result",4],["tcerr",4]]]],[11,"impose","","Imposes a constraint on keys. They can be obtained by…",3,[[["constraint",4]],[["tcerr",4],["result",4]]]],[11,"lift_into","","Lifts a collection of keys as children into a certain…",3,[[["vec",3],["tckey",3]],["tckey",3]]],[11,"lift_partially","","Lifts a collection of keys as subset of children into a…",3,[[["option",4],["vec",3]],["tckey",3]]],[11,"all_keys","","Returns an iterator over all keys currently present in the…",3,[[]]],[11,"type_check_preliminary","","Finalizes the type check procedure without constructing a…",3,[[],[["result",4],["preliminarytypetable",6],["tcerr",4]]]],[11,"type_check","","Finalizes the type check procedure. Calling this function…",3,[[],[["typetable",6],["tcerr",4],["result",4]]]],[0,"types","","This mod contains everything related to types and…",null,null],[3,"Partial","rusttyc::types","Partial is a container for a [Variant] and the least arity…",null,null],[12,"variant","","The variant represented by this `Partial`.",4,null],[12,"least_arity","","The least number of children the variant will have after…",4,null],[3,"Preliminary","","Represents a preliminary output of the type check. Mainly…",null,null],[12,"variant","","The type variant of the entity represented by this…",5,null],[12,"children","","The [TcKey]s of the children of this variant.",5,null],[4,"Arity","","Represents the arity of a [Variant].",null,null],[13,"Variable","","The arity is variable, i.e., it does not have a specific…",6,null],[13,"Fixed","","The arity has a fixed value.",6,null],[6,"PreliminaryTypeTable","","A type table containing a [Preliminary] type for each…",null,null],[6,"TypeTable","","A type table containing the constructed type of the…",null,null],[8,"Variant","","A variant that will be inferred during the type checking…",null,null],[16,"Err","","Result of a meet of two incompatible type, i.e., it…",7,null],[10,"top","","Returns the unconstrained, most abstract type.",7,[[]]],[11,"is_top","","Determines whether or not `self` is the unconstrained type.",7,[[]]],[10,"meet","","Attempts to meet two variants respecting their…",7,[[["partial",3]],[["result",4],["partial",3]]]],[10,"arity","","Indicates whether the variant has a fixed arity. Note that…",7,[[],["arity",4]]],[8,"Constructable","","A type implementing this trait can potentially be…",null,null],[16,"Type","","The result type of the attempted construction.",8,null],[10,"construct","","Attempts to transform `self` into an more concrete…",8,[[],["result",4]]],[6,"VarlessTypeChecker","rusttyc","A [TypeChecker] instance in case no variables are required.",null,null],[8,"TcVar","","Represents a re-usable variable in the type checking…",null,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","rusttyc::types","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"clone","rusttyc","",2,[[],["tckey",3]]],[11,"clone","","",3,[[],["typechecker",3]]],[11,"clone","","",0,[[],["tcerr",4]]],[11,"clone","rusttyc::types","",6,[[],["arity",4]]],[11,"clone","","",4,[[],["partial",3]]],[11,"clone","","",5,[[],["preliminary",3]]],[11,"default","rusttyc","",3,[[]]],[11,"cmp","","",2,[[["tckey",3]],["ordering",4]]],[11,"eq","","",2,[[["tckey",3]]]],[11,"ne","","",2,[[["tckey",3]]]],[11,"partial_cmp","","",2,[[["tckey",3]],[["ordering",4],["option",4]]]],[11,"lt","","",2,[[["tckey",3]]]],[11,"le","","",2,[[["tckey",3]]]],[11,"gt","","",2,[[["tckey",3]]]],[11,"ge","","",2,[[["tckey",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","rusttyc::types","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"hash","rusttyc","",2,[[]]]],"p":[[4,"TcErr"],[13,"ArityMismatch"],[3,"TcKey"],[3,"TypeChecker"],[3,"Partial"],[3,"Preliminary"],[4,"Arity"],[8,"Variant"],[8,"Constructable"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);